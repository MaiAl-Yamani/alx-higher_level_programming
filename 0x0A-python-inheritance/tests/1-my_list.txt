>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>
>>> print(my_list)
[]
>>> my_list = MyList([1, 2, 3])
>>> print(my_list)
[1, 2, 3]
>>> my_list = MyList(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'NoneType' object is not iterable
>>> my_list = MyList([1, 2], [3, 4])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: list expected at most 1 argument, got 2
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.append(3)
>>> print(my_list)
[1, 2, 3]
>>> my_list[0] = 5
>>> print(my_list)
[5, 2, 3]
>>> my_list.remove(5)
>>> print(my_list)
[2, 3]
>>> my_list = MyList()
>>> print(my_list.print_sorted)
<bound method MyList.print_sorted of []>
>>> my_list.print_sorted(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: print_sorted() takes 1 positional argument but 2 were given
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list = MyList()
>>> my_list.append("Bob")
>>> my_list.append("Adam")
>>> my_list.append("Sarah")
>>> my_list.append("Betty")
>>> print(my_list)
['Bob', 'Adam', 'Sarah', 'Betty']
>>> my_list.print_sorted()
['Adam', 'Betty', 'Bob', 'Sarah']
>>> print(my_list)
['Bob', 'Adam', 'Sarah', 'Betty']
>>> my_list = MyList()
>>> my_list.print_sorted()
[]
>>> my_list = MyList([1, "Bob", "Adam", 5])
>>> my_list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/1-my_list.py", line 9, in print_sorted
    print(sorted(list(self)))
TypeError: '<' not supported between instances of 'str' and 'int'
